import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np
from statsmodels.stats.multicomp import pairwise_tukeyhsd

def plot_violin_with_stats(csv_path, y_columns, title="", x_label="", y_label=""):
    """
    Plots a violin chart from specified columns in a CSV file and adds statistical testing results.

    Parameters:
    - csv_path: str, path to the CSV file
    - y_columns: list of column names to plot (2 or 3 columns supported)
    - title: str, plot title
    - x_label: str, x-axis label
    - y_label: str, y-axis label
    """
    # Load the CSV
    df = pd.read_csv(csv_path)

    # Validate the y_columns
    for col in y_columns:
        if col not in df.columns:
            raise ValueError(f"{col} is not a column in the CSV file.")

    # Melt the DataFrame to long-form for plotting
    df_melted = df[y_columns].melt(var_name="Group", value_name="Value")

    # Create the plot
    plt.figure(figsize=(10, 6))
    ax = sns.violinplot(data=df_melted, x="Group", y="Value", inner="box", palette="Set2")

    # Statistical testing and annotations
    if len(y_columns) == 2:
        # Perform a two-tailed paired t-test
        group1 = df[y_columns[0]]
        group2 = df[y_columns[1]]
        
        t_stat, p_value = stats.ttest_rel(group1, group2)

        # Get the maximum value for positioning the bar
        max_value = max(group1.max(), group2.max())
    
        # Draw a horizontal line/bar for the comparison
        ax.plot([0, 1], [max_value + 5, max_value + 5], color="black", lw=1, zorder=10)
    
        # Add the p-value annotation above the bar
        ax.annotate(f"p = {p_value:.3e}", xy=(0.5, max_value + 5.5), ha="center", fontsize=12, color="black")
    
        # Add title and labels
        plt.title(title)
        plt.xlabel(x_label if x_label else "Group")
        plt.ylabel(y_label if y_label else "Value")
    
    elif len(y_columns) == 3:
         # Perform one-way ANOVA
        df_melted['Group'] = df_melted['Group'].astype(str)
        anova_result = stats.f_oneway(df[y_columns[0]], df[y_columns[1]], df[y_columns[2]])
        
        p_value_anova = anova_result.pvalue
        # Perform Tukey HSD for pairwise comparisons
        pairwise_result = pairwise_tukeyhsd(df_melted['Value'], df_melted['Group'], alpha=0.05)
        
        # Get the Tukey HSD summary
        summary_data = pairwise_result.summary().data[1:]  # Skip the header row
        p_values = [row[4] for row in summary_data]  # Extract p-values
        
        # Define the pairs (for correct x-axis positions)
        pairs = [(0, 1), (1, 2), (0, 2)]  # (1 vs 2, 2 vs 3, 1 vs 3)
        
        # Offset values for each comparison to avoid overlap
        offset = 40
        
        # Plot bars for each pairwise comparison and display p-values
        for idx, (i, j) in enumerate(pairs):
            p_val = p_values[idx]
            # Get the maximum value to place the p-value bar
            max_value = max(df[y_columns[i]].max(), df[y_columns[j]].max())
            
            # Adjust vertical offset for each pair to prevent overlap
            if idx == 1:  # For 2 vs 3 (second comparison)
                max_value += offset
            elif idx == 2:  # For 1 vs 3 (third comparison)
                max_value += 2 * offset  # Further offset
            
            # Draw a horizontal line/bar for the comparison
            ax.plot([i, i, j, j], [max_value + 7, max_value + 7.5, max_value + 7.5, max_value + 7], color="black", lw=1, zorder=10)
            ax.plot([i, j], [max_value + 7.5, max_value + 7.5], color="black", lw=1, zorder=10)

            # Add the p-value annotation for this comparison
            ax.annotate(f"p = {p_val:.3e}", xy=((i + j) / 2, max_value + 10), 
                        ha="center", fontsize=12, color="black")
        

    # Customize the labels
    plt.title(title)
    plt.xlabel(x_label if x_label else "Group")
    plt.ylabel(y_label if y_label else "Value")

    # Layout and display
    plt.tight_layout()
    plt.show()  # Display the plot once



# Here is an example of how to call the function: 
# plot_violin_with_stats(
   # csv_path="COVID-19_CBC_Data.csv",
   # y_columns=["Neutrophils Count", "Lymphocyte Count", "Platelet Count"],
   # title="Blood counts",
   # x_label="Cells",
   # y_label="Counts"
#)